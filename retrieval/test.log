Traceback (most recent call last):
  File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 140, in <module>
    ddp_main()
  File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 57, in ddp_main
    dist.init_process_group("nccl")
  File "/home/yanmingke/.venv/lib/python3.10/site-packages/torch/distributed/c10d_logger.py", line 83, in wrapper
    return func(*args, **kwargs)
  File "/home/yanmingke/.venv/lib/python3.10/site-packages/torch/distributed/c10d_logger.py", line 97, in wrapper
    func_return = func(*args, **kwargs)
  File "/home/yanmingke/.venv/lib/python3.10/site-packages/torch/distributed/distributed_c10d.py", line 1520, in init_process_group
    store, rank, world_size = next(rendezvous_iterator)
  File "/home/yanmingke/.venv/lib/python3.10/site-packages/torch/distributed/rendezvous.py", line 258, in _env_rendezvous_handler
    rank = int(_get_env_or_raise("RANK"))
  File "/home/yanmingke/.venv/lib/python3.10/site-packages/torch/distributed/rendezvous.py", line 243, in _get_env_or_raise
    raise _env_error(env_var)
ValueError: Error initializing torch.distributed using env:// rendezvous: environment variable RANK expected, but not set
Start running basic DDP example on rank 0.
Start running basic DDP example on rank 1.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_031632-koxtfy38
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/koxtfy38
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:14<133:12:54, 14.74s/it]  0%|          | 1/32542 [00:14<134:57:20, 14.93s/it]  0%|          | 3/32542 [00:14<35:13:24,  3.90s/it]   0%|          | 3/32542 [00:15<35:42:55,  3.95s/it]   0%|          | 4/32542 [00:15<23:33:15,  2.61s/it]  0%|          | 4/32542 [00:15<23:51:20,  2.64s/it]  0%|          | 5/32542 [00:15<16:17:55,  1.80s/it]  0%|          | 5/32542 [00:15<16:28:17,  1.82s/it]  0%|          | 6/32542 [00:15<11:33:16,  1.28s/it]  0%|          | 6/32542 [00:15<11:42:50,  1.30s/it]  0%|          | 7/32542 [00:15<8:25:29,  1.07it/s]   0%|          | 7/32542 [00:15<8:30:56,  1.06it/s]   0%|          | 8/32542 [00:15<6:19:23,  1.43it/s]  0%|          | 8/32542 [00:15<6:19:37,  1.43it/s]  0%|          | 9/32542 [00:25<30:02:36,  3.32s/it]  0%|          | 10/32542 [00:26<23:57:11,  2.65s/it]  0%|          | 11/32542 [00:26<17:10:36,  1.90s/it]  0%|          | 12/32542 [00:26<12:47:13,  1.42s/it]  0%|          | 13/32542 [00:27<9:25:33,  1.04s/it]   0%|          | 14/32542 [00:27<7:02:31,  1.28it/s]  0%|          | 15/32542 [00:27<5:20:14,  1.69it/s]  0%|          | 16/32542 [00:27<4:13:17,  2.14it/s]  0%|          | 9/32542 [00:27<37:47:54,  4.18s/it]  0%|          | 10/32542 [00:28<26:44:39,  2.96s/it]  0%|          | 11/32542 [00:28<19:04:10,  2.11s/it]  0%|          | 12/32542 [00:28<13:47:34,  1.53s/it]  0%|          | 13/32542 [00:28<10:07:38,  1.12s/it]  0%|          | 14/32542 [00:28<7:33:29,  1.20it/s]   0%|          | 15/32542 [00:28<5:46:23,  1.57it/s]  0%|          | 16/32542 [00:29<4:30:38,  2.00it/s]  0%|          | 17/32542 [00:38<32:49:48,  3.63s/it]  0%|          | 18/32542 [00:38<23:25:51,  2.59s/it]  0%|          | 19/32542 [00:38<16:48:32,  1.86s/it]  0%|          | 20/32542 [00:39<12:15:30,  1.36s/it]  0%|          | 21/32542 [00:39<9:04:19,  1.00s/it]   0%|          | 22/32542 [00:39<6:45:49,  1.34it/s]  0%|          | 23/32542 [00:39<5:13:14,  1.73it/s]  0%|          | 24/32542 [00:39<4:08:36,  2.18it/s]  0%|          | 17/32542 [00:40<32:51:08,  3.64s/it]  0%|          | 18/32542 [00:40<23:27:32,  2.60s/it]  0%|          | 19/32542 [00:40<16:54:21,  1.87s/it]  0%|          | 20/32542 [00:40<12:18:24,  1.36s/it]  0%|          | 21/32542 [00:40<9:06:29,  1.01s/it]   0%|          | 22/32542 [00:40<6:48:33,  1.33it/s]  0%|          | 23/32542 [00:41<5:14:54,  1.72it/s]  0%|          | 24/32542 [00:41<4:09:03,  2.18it/s]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
Start running basic DDP example on rank 1.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_070524-rjk9cl9j
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/rjk9cl9j
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_111354-v0lfg5nu
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/v0lfg5nu
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:13<119:18:37, 13.20s/it]  0%|          | 3/32542 [00:13<31:29:06,  3.48s/it]   0%|          | 5/32542 [00:13<15:51:40,  1.75s/it]  0%|          | 6/32542 [00:13<11:54:33,  1.32s/it]  0%|          | 7/32542 [00:13<8:55:52,  1.01it/s]   0%|          | 8/32542 [00:13<6:42:02,  1.35it/s]  0%|          | 9/32542 [00:22<26:04:53,  2.89s/it]  0%|          | 10/32542 [00:22<18:50:33,  2.09s/it]  0%|          | 11/32542 [00:23<16:56:15,  1.87s/it]  0%|          | 12/32542 [00:23<12:14:11,  1.35s/it]  0%|          | 13/32542 [00:23<8:57:24,  1.01it/s]   0%|          | 14/32542 [00:24<6:38:28,  1.36it/s]  0%|          | 15/32542 [00:24<4:59:06,  1.81it/s]  0%|          | 16/32542 [00:24<5:10:58,  1.74it/s]  0%|          | 17/32542 [00:32<25:31:54,  2.83s/it]  0%|          | 18/32542 [00:33<18:14:06,  2.02s/it]  0%|          | 19/32542 [00:35<18:30:18,  2.05s/it]  0%|          | 20/32542 [00:35<13:19:23,  1.47s/it]  0%|          | 21/32542 [00:35<9:39:13,  1.07s/it]   0%|          | 22/32542 [00:35<7:04:59,  1.28it/s]  0%|          | 23/32542 [00:35<5:18:56,  1.70it/s]  0%|          | 24/32542 [00:38<10:15:09,  1.14s/it]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_112459-ncxnmc2a
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/ncxnmc2a
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:08<77:05:08,  8.53s/it]  0%|          | 3/32542 [00:08<20:28:29,  2.27s/it]  0%|          | 4/32542 [00:08<13:48:08,  1.53s/it]  0%|          | 5/32542 [00:08<9:38:44,  1.07s/it]   0%|          | 6/32542 [00:09<6:52:42,  1.31it/s]  0%|          | 7/32542 [00:09<5:06:21,  1.77it/s]  0%|          | 8/32542 [00:09<3:54:16,  2.31it/s]  0%|          | 9/32542 [00:16<21:44:35,  2.41s/it]  0%|          | 10/32542 [00:16<15:28:30,  1.71s/it]  0%|          | 11/32542 [00:16<11:09:34,  1.23s/it]  0%|          | 12/32542 [00:16<8:08:03,  1.11it/s]   0%|          | 13/32542 [00:16<6:00:08,  1.51it/s]  0%|          | 14/32542 [00:16<4:33:16,  1.98it/s]  0%|          | 15/32542 [00:16<3:33:38,  2.54it/s]  0%|          | 16/32542 [00:17<2:49:12,  3.20it/s]  0%|          | 17/32542 [00:23<18:29:52,  2.05s/it]  0%|          | 18/32542 [00:23<13:14:53,  1.47s/it]  0%|          | 19/32542 [00:23<9:39:12,  1.07s/it]   0%|          | 20/32542 [00:23<7:06:49,  1.27it/s]  0%|          | 21/32542 [00:23<5:16:47,  1.71it/s]  0%|          | 22/32542 [00:23<4:03:36,  2.22it/s]  0%|          | 23/32542 [00:23<3:13:34,  2.80it/s]  0%|          | 24/32542 [00:24<2:38:41,  3.42it/s]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_113024-s1qhdksp
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/s1qhdksp
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Traceback (most recent call last):
  File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 140, in <module>
    ddp_main()
  File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 128, in ddp_main
    tester = test_wBert(model=model,
  File "/home/yanmingke/ecgfounder2/retrieval/../utils/utils_trainer.py", line 389, in __init__
    self.csv_file =  self.csv_file = os.path.join(self.checkpoint,"retrieval/test_results_{self.model_name}.csv")
AttributeError: 'test_wBert' object has no attribute 'checkpoint'
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 140, in <module>
[rank0]:     ddp_main()
[rank0]:   File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 128, in ddp_main
[rank0]:     tester = test_wBert(model=model,
[rank0]:   File "/home/yanmingke/ecgfounder2/retrieval/../utils/utils_trainer.py", line 389, in __init__
[rank0]:     self.csv_file =  self.csv_file = os.path.join(self.checkpoint,"retrieval/test_results_{self.model_name}.csv")
[rank0]: AttributeError: 'test_wBert' object has no attribute 'checkpoint'
Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_113135-3r4rck6y
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/3r4rck6y
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Traceback (most recent call last):
  File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 140, in <module>
    ddp_main()
  File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 128, in ddp_main
    tester = test_wBert(model=model,
  File "/home/yanmingke/ecgfounder2/retrieval/../utils/utils_trainer.py", line 374, in __init__
    self.checkpoint = args['checkpoint']
KeyError: 'checkpoint'
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 140, in <module>
[rank0]:     ddp_main()
[rank0]:   File "/home/yanmingke/ecgfounder2/retrieval/main.py", line 128, in ddp_main
[rank0]:     tester = test_wBert(model=model,
[rank0]:   File "/home/yanmingke/ecgfounder2/retrieval/../utils/utils_trainer.py", line 374, in __init__
[rank0]:     self.checkpoint = args['checkpoint']
[rank0]: KeyError: 'checkpoint'
Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_115436-8hf76x32
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/8hf76x32
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:08<75:51:02,  8.39s/it]  0%|          | 3/32542 [00:08<20:11:15,  2.23s/it]  0%|          | 4/32542 [00:08<13:36:59,  1.51s/it]  0%|          | 5/32542 [00:08<9:30:59,  1.05s/it]   0%|          | 6/32542 [00:08<6:47:16,  1.33it/s]  0%|          | 7/32542 [00:09<5:01:01,  1.80it/s]  0%|          | 8/32542 [00:09<3:52:05,  2.34it/s]  0%|          | 9/32542 [00:14<17:12:27,  1.90s/it]  0%|          | 10/32542 [00:14<12:20:09,  1.37s/it]  0%|          | 11/32542 [00:15<10:23:22,  1.15s/it]  0%|          | 12/32542 [00:16<9:26:55,  1.05s/it]   0%|          | 13/32542 [00:16<6:56:52,  1.30it/s]  0%|          | 14/32542 [00:16<5:13:44,  1.73it/s]  0%|          | 15/32542 [00:16<3:59:58,  2.26it/s]  0%|          | 16/32542 [00:16<3:09:11,  2.87it/s]  0%|          | 17/32542 [00:22<17:26:59,  1.93s/it]  0%|          | 18/32542 [00:22<12:34:11,  1.39s/it]  0%|          | 19/32542 [00:22<9:09:03,  1.01s/it]   0%|          | 20/32542 [00:22<6:44:26,  1.34it/s]  0%|          | 21/32542 [00:23<6:31:40,  1.38it/s]  0%|          | 22/32542 [00:23<4:54:15,  1.84it/s]  0%|          | 23/32542 [00:23<3:44:44,  2.41it/s]  0%|          | 24/32542 [00:23<2:57:45,  3.05it/s]  0%|          | 25/32542 [00:28<16:00:43,  1.77s/it]  0%|          | 26/32542 [00:28<11:34:37,  1.28s/it]  0%|          | 27/32542 [00:29<8:28:22,  1.07it/s]   0%|          | 28/32542 [00:29<6:15:17,  1.44it/s]  0%|          | 29/32542 [00:29<5:59:05,  1.51it/s]  0%|          | 30/32542 [00:29<4:33:28,  1.98it/s]  0%|          | 31/32542 [00:29<3:32:30,  2.55it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0009765625, 'R@5 ECG to Text': 0.00390625, 'R@10 ECG to Text': 0.0078125, 'R@1 Text to ECG': 0.0009765625, 'R@5 Text to ECG': 0.0048828125, 'R@10 Text to ECG': 0.01171875}
  0%|          | 32/32542 [00:30<3:18:37,  2.73it/s]  0%|          | 33/32542 [00:35<15:46:44,  1.75s/it]  0%|          | 34/32542 [00:35<11:25:47,  1.27s/it]  0%|          | 35/32542 [00:35<8:21:40,  1.08it/s]   0%|          | 36/32542 [00:35<6:11:35,  1.46it/s]  0%|          | 37/32542 [00:35<4:44:57,  1.90it/s]  0%|          | 38/32542 [00:35<3:42:06,  2.44it/s]  0%|          | 39/32542 [00:36<2:54:32,  3.10it/s]  0%|          | 40/32542 [00:36<2:23:16,  3.78it/s]  0%|          | 41/32542 [00:48<35:00:27,  3.88s/it]  0%|          | 42/32542 [00:48<24:51:26,  2.75s/it]  0%|          | 43/32542 [00:48<17:45:20,  1.97s/it]  0%|          | 44/32542 [00:48<12:44:03,  1.41s/it]  0%|          | 45/32542 [00:49<10:56:51,  1.21s/it]  0%|          | 46/32542 [00:49<7:57:56,  1.13it/s]   0%|          | 47/32542 [00:49<5:56:28,  1.52it/s]  0%|          | 48/32542 [00:50<4:30:52,  2.00it/s]  0%|          | 49/32542 [01:01<33:14:39,  3.68s/it]  0%|          | 50/32542 [01:01<23:34:13,  2.61s/it]  0%|          | 51/32542 [01:01<16:52:14,  1.87s/it]  0%|          | 52/32542 [01:01<12:08:48,  1.35s/it]  0%|          | 53/32542 [01:02<10:51:11,  1.20s/it]  0%|          | 54/32542 [01:02<7:57:55,  1.13it/s]   0%|          | 55/32542 [01:02<5:57:00,  1.52it/s]  0%|          | 56/32542 [01:02<4:29:36,  2.01it/s]  0%|          | 57/32542 [01:12<30:17:50,  3.36s/it]  0%|          | 58/32542 [01:12<21:32:59,  2.39s/it]  0%|          | 59/32542 [01:13<16:19:00,  1.81s/it]  0%|          | 60/32542 [01:15<16:19:59,  1.81s/it]  0%|          | 61/32542 [01:15<13:20:05,  1.48s/it]  0%|          | 62/32542 [01:16<9:41:51,  1.07s/it]   0%|          | 63/32542 [01:16<7:06:35,  1.27it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0009765625, 'R@5 ECG to Text': 0.0078125, 'R@10 ECG to Text': 0.013671875, 'R@1 Text to ECG': 0.0, 'R@5 Text to ECG': 0.001953125, 'R@10 Text to ECG': 0.0048828125}
  0%|          | 64/32542 [01:16<5:46:09,  1.56it/s]  0%|          | 65/32542 [01:24<26:13:25,  2.91s/it]  0%|          | 66/32542 [01:24<18:42:12,  2.07s/it]  0%|          | 67/32542 [01:25<14:15:26,  1.58s/it]  0%|          | 68/32542 [01:28<19:22:22,  2.15s/it]  0%|          | 69/32542 [01:28<14:22:18,  1.59s/it]  0%|          | 70/32542 [01:29<10:25:30,  1.16s/it]  0%|          | 71/32542 [01:29<7:39:17,  1.18it/s]   0%|          | 72/32542 [01:29<5:40:48,  1.59it/s]  0%|          | 73/32542 [01:36<23:27:31,  2.60s/it]  0%|          | 74/32542 [01:36<16:44:22,  1.86s/it]  0%|          | 75/32542 [01:36<12:00:56,  1.33s/it]  0%|          | 76/32542 [01:41<22:09:32,  2.46s/it]  0%|          | 77/32542 [01:41<15:50:53,  1.76s/it]  0%|          | 78/32542 [01:42<11:25:57,  1.27s/it]  0%|          | 79/32542 [01:42<8:21:09,  1.08it/s]   0%|          | 80/32542 [01:42<6:10:48,  1.46it/s]  0%|          | 81/32542 [01:46<16:28:20,  1.83s/it]  0%|          | 82/32542 [01:47<11:56:21,  1.32s/it]  0%|          | 83/32542 [01:47<8:39:54,  1.04it/s]   0%|          | 84/32542 [01:53<22:08:15,  2.46s/it]  0%|          | 85/32542 [01:53<15:50:24,  1.76s/it]  0%|          | 86/32542 [01:53<11:25:09,  1.27s/it]  0%|          | 87/32542 [01:53<8:20:59,  1.08it/s]   0%|          | 88/32542 [01:53<6:10:59,  1.46it/s]  0%|          | 89/32542 [01:57<15:50:48,  1.76s/it]  0%|          | 90/32542 [01:57<11:26:43,  1.27s/it]  0%|          | 91/32542 [01:58<9:23:29,  1.04s/it]   0%|          | 92/32542 [02:04<23:11:38,  2.57s/it]  0%|          | 93/32542 [02:04<16:36:26,  1.84s/it]  0%|          | 94/32542 [02:04<11:56:44,  1.33s/it]  0%|          | 95/32542 [02:04<8:41:47,  1.04it/s] 
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0, 'R@5 ECG to Text': 0.00390625, 'R@10 ECG to Text': 0.0048828125, 'R@1 Text to ECG': 0.001953125, 'R@5 Text to ECG': 0.0068359375, 'R@10 Text to ECG': 0.0107421875}
  0%|          | 96/32542 [02:05<6:57:03,  1.30it/s]  0%|          | 97/32542 [02:07<10:37:28,  1.18s/it]  0%|          | 98/32542 [02:07<8:32:19,  1.06it/s]   0%|          | 99/32542 [02:08<8:08:01,  1.11it/s]  0%|          | 100/32542 [02:15<23:29:18,  2.61s/it]  0%|          | 101/32542 [02:15<16:43:41,  1.86s/it]  0%|          | 102/32542 [02:15<12:04:11,  1.34s/it]  0%|          | 103/32542 [02:15<8:48:10,  1.02it/s]   0%|          | 104/32542 [02:15<6:30:42,  1.38it/s]  0%|          | 105/32542 [02:16<6:19:08,  1.43it/s]  0%|          | 106/32542 [02:17<7:40:56,  1.17it/s]  0%|          | 107/32542 [02:18<8:18:19,  1.08it/s]  0%|          | 108/32542 [02:24<21:41:49,  2.41s/it]  0%|          | 109/32542 [02:24<15:30:34,  1.72s/it]  0%|          | 110/32542 [02:24<11:11:14,  1.24s/it]  0%|          | 111/32542 [02:24<8:12:32,  1.10it/s]   0%|          | 112/32542 [02:25<6:05:37,  1.48it/s]  0%|          | 113/32542 [02:25<6:36:32,  1.36it/s]  0%|          | 114/32542 [02:27<9:48:47,  1.09s/it]  0%|          | 115/32542 [02:28<9:07:44,  1.01s/it]  0%|          | 116/32542 [02:34<22:27:17,  2.49s/it]  0%|          | 117/32542 [02:34<16:03:25,  1.78s/it]  0%|          | 118/32542 [02:34<11:34:15,  1.28s/it]  0%|          | 119/32542 [02:35<8:25:57,  1.07it/s]   0%|          | 120/32542 [02:35<6:16:31,  1.44it/s]  0%|          | 121/32542 [02:37<10:23:16,  1.15s/it]  0%|          | 122/32542 [02:37<7:36:33,  1.18it/s]   0%|          | 123/32542 [02:38<7:40:56,  1.17it/s]  0%|          | 124/32542 [02:43<19:24:41,  2.16s/it]  0%|          | 125/32542 [02:43<13:54:56,  1.55s/it]  0%|          | 126/32542 [02:43<10:03:49,  1.12s/it]  0%|          | 127/32542 [02:43<7:22:34,  1.22it/s] 
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0009765625, 'R@5 ECG to Text': 0.0048828125, 'R@10 ECG to Text': 0.0087890625, 'R@1 Text to ECG': 0.001953125, 'R@5 Text to ECG': 0.0029296875, 'R@10 Text to ECG': 0.005859375}
  0%|          | 128/32542 [02:44<6:01:40,  1.49it/s]  0%|          | 129/32542 [02:47<12:03:56,  1.34s/it]  0%|          | 130/32542 [02:47<10:21:20,  1.15s/it]  0%|          | 131/32542 [02:48<7:53:34,  1.14it/s]   0%|          | 132/32542 [02:54<22:14:36,  2.47s/it]  0%|          | 133/32542 [02:54<15:54:49,  1.77s/it]  0%|          | 134/32542 [02:54<11:30:21,  1.28s/it]  0%|          | 135/32542 [02:54<8:22:30,  1.07it/s]   0%|          | 136/32542 [02:54<6:13:04,  1.45it/s]  0%|          | 137/32542 [02:57<10:41:17,  1.19s/it]  0%|          | 138/32542 [02:58<11:01:08,  1.22s/it]  0%|          | 139/32542 [02:58<8:05:10,  1.11it/s]   0%|          | 140/32542 [03:05<23:37:25,  2.62s/it]  0%|          | 141/32542 [03:05<16:53:07,  1.88s/it]  0%|          | 142/32542 [03:05<12:11:14,  1.35s/it]  0%|          | 143/32542 [03:05<8:51:38,  1.02it/s]   0%|          | 144/32542 [03:05<6:31:16,  1.38it/s]  0%|          | 145/32542 [03:06<5:41:32,  1.58it/s]  0%|          | 146/32542 [03:07<8:05:25,  1.11it/s]  0%|          | 147/32542 [03:07<6:00:30,  1.50it/s]  0%|          | 148/32542 [03:14<22:46:54,  2.53s/it]  0%|          | 149/32542 [03:14<16:17:05,  1.81s/it]  0%|          | 150/32542 [03:14<11:43:03,  1.30s/it]  0%|          | 151/32542 [03:15<8:33:43,  1.05it/s]   0%|          | 152/32542 [03:15<6:21:42,  1.41it/s]  0%|          | 153/32542 [03:15<6:26:12,  1.40it/s]  0%|          | 154/32542 [03:17<9:37:50,  1.07s/it]  0%|          | 155/32542 [03:18<8:36:57,  1.04it/s]  0%|          | 156/32542 [03:24<22:30:08,  2.50s/it]  0%|          | 157/32542 [03:24<16:05:08,  1.79s/it]  0%|          | 158/32542 [03:24<11:37:26,  1.29s/it]  0%|          | 159/32542 [03:25<8:28:44,  1.06it/s] 
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.001953125, 'R@5 ECG to Text': 0.00390625, 'R@10 ECG to Text': 0.0078125, 'R@1 Text to ECG': 0.0009765625, 'R@5 Text to ECG': 0.00390625, 'R@10 Text to ECG': 0.005859375}
  0%|          | 160/32542 [03:25<6:41:21,  1.34it/s]  0%|          | 162/32542 [03:28<9:20:48,  1.04s/it]  1%|          | 163/32542 [03:28<7:17:54,  1.23it/s]  1%|          | 164/32542 [03:33<18:33:46,  2.06s/it]  1%|          | 165/32542 [03:33<13:50:21,  1.54s/it]  1%|          | 166/32542 [03:34<10:16:50,  1.14s/it]  1%|          | 167/32542 [03:34<7:41:47,  1.17it/s]   1%|          | 168/32542 [03:34<5:47:05,  1.55it/s]  1%|          | 169/32542 [03:34<5:14:09,  1.72it/s]  1%|          | 170/32542 [03:37<11:11:20,  1.24s/it]  1%|          | 171/32542 [03:37<8:12:58,  1.09it/s]   1%|          | 172/32542 [03:42<19:34:09,  2.18s/it]  1%|          | 173/32542 [03:42<14:02:32,  1.56s/it]  1%|          | 174/32542 [03:43<10:13:05,  1.14s/it]  1%|          | 175/32542 [03:43<7:30:42,  1.20it/s]   1%|          | 176/32542 [03:43<5:35:39,  1.61it/s]  1%|          | 177/32542 [03:43<5:34:43,  1.61it/s]  1%|          | 178/32542 [03:46<9:23:36,  1.04s/it]  1%|          | 179/32542 [03:47<10:52:18,  1.21s/it]  1%|          | 180/32542 [03:53<24:01:47,  2.67s/it]  1%|          | 181/32542 [03:53<17:07:52,  1.91s/it]  1%|          | 182/32542 [03:53<12:20:34,  1.37s/it]  1%|          | 183/32542 [03:54<8:59:09,  1.00it/s]   1%|          | 184/32542 [03:54<6:36:41,  1.36it/s]  1%|          | 185/32542 [03:54<4:59:11,  1.80it/s]  1%|          | 186/32542 [03:54<5:15:57,  1.71it/s]  1%|          | 187/32542 [03:57<9:10:56,  1.02s/it]  1%|          | 188/32542 [04:03<24:41:23,  2.75s/it]  1%|          | 189/32542 [04:03<17:36:02,  1.96s/it]  1%|          | 190/32542 [04:04<12:40:09,  1.41s/it]  1%|          | 191/32542 [04:04<9:13:22,  1.03s/it] 
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0009765625, 'R@5 ECG to Text': 0.005859375, 'R@10 ECG to Text': 0.0146484375, 'R@1 Text to ECG': 0.0, 'R@5 Text to ECG': 0.0068359375, 'R@10 Text to ECG': 0.01171875}
  1%|          | 192/32542 [04:04<7:16:19,  1.24it/s]  1%|          | 194/32542 [04:05<5:18:56,  1.69it/s]  1%|          | 195/32542 [04:06<6:18:03,  1.43it/s]  1%|          | 196/32542 [04:14<25:00:00,  2.78s/it]  1%|          | 197/32542 [04:14<18:32:15,  2.06s/it]  1%|          | 198/32542 [04:15<13:39:13,  1.52s/it]  1%|          | 199/32542 [04:15<10:05:28,  1.12s/it]  1%|          | 200/32542 [04:15<7:28:18,  1.20it/s]   1%|          | 201/32542 [04:15<5:38:39,  1.59it/s]  1%|          | 202/32542 [04:15<4:18:23,  2.09it/s]  1%|          | 203/32542 [04:15<3:22:36,  2.66it/s]  1%|          | 204/32542 [04:24<24:56:21,  2.78s/it]  1%|          | 205/32542 [04:24<17:53:13,  1.99s/it]  1%|          | 206/32542 [04:24<12:52:44,  1.43s/it]  1%|          | 207/32542 [04:24<9:23:22,  1.05s/it]   1%|          | 208/32542 [04:24<6:54:45,  1.30it/s]  1%|          | 209/32542 [04:24<5:10:28,  1.74it/s]  1%|          | 210/32542 [04:24<3:58:53,  2.26it/s]  1%|          | 211/32542 [04:25<3:07:02,  2.88it/s]  1%|          | 212/32542 [04:33<25:56:35,  2.89s/it]  1%|          | 213/32542 [04:34<18:31:49,  2.06s/it]  1%|          | 214/32542 [04:34<13:17:41,  1.48s/it]  1%|          | 215/32542 [04:34<9:40:55,  1.08s/it]   1%|          | 216/32542 [04:34<7:08:16,  1.26it/s]  1%|          | 217/32542 [04:34<5:17:21,  1.70it/s]  1%|          | 218/32542 [04:34<4:00:47,  2.24it/s]  1%|          | 219/32542 [04:34<3:10:35,  2.83it/s]  1%|          | 220/32542 [04:45<30:31:19,  3.40s/it]  1%|          | 221/32542 [04:45<21:44:33,  2.42s/it]  1%|          | 222/32542 [04:45<15:35:58,  1.74s/it]  1%|          | 223/32542 [04:45<11:12:06,  1.25s/it]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.001953125, 'R@5 ECG to Text': 0.00390625, 'R@10 ECG to Text': 0.013671875, 'R@1 Text to ECG': 0.0009765625, 'R@5 Text to ECG': 0.00390625, 'R@10 Text to ECG': 0.0107421875}
  1%|          | 224/32542 [04:46<8:39:10,  1.04it/s]   1%|          | 226/32542 [04:46<4:56:13,  1.82it/s]  1%|          | 227/32542 [04:46<4:00:08,  2.24it/s]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_120041-sqdo8hc3
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/sqdo8hc3
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:08<75:07:41,  8.31s/it]  0%|          | 3/32542 [00:08<19:59:14,  2.21s/it]  0%|          | 4/32542 [00:08<13:30:29,  1.49s/it]  0%|          | 5/32542 [00:08<9:22:55,  1.04s/it]   0%|          | 6/32542 [00:08<6:42:14,  1.35it/s]  0%|          | 7/32542 [00:08<4:58:31,  1.82it/s]  0%|          | 8/32542 [00:09<3:47:42,  2.38it/s]  0%|          | 9/32542 [00:14<17:48:47,  1.97s/it]  0%|          | 10/32542 [00:15<14:37:01,  1.62s/it]  0%|          | 11/32542 [00:15<10:32:35,  1.17s/it]  0%|          | 12/32542 [00:15<7:42:47,  1.17it/s]   0%|          | 13/32542 [00:15<5:42:48,  1.58it/s]  0%|          | 14/32542 [00:15<4:21:08,  2.08it/s]  0%|          | 15/32542 [00:18<11:27:26,  1.27s/it]  0%|          | 16/32542 [00:19<8:22:58,  1.08it/s]   0%|          | 17/32542 [00:22<13:44:32,  1.52s/it]  0%|          | 18/32542 [00:22<10:01:49,  1.11s/it]  0%|          | 19/32542 [00:22<7:22:02,  1.23it/s]   0%|          | 20/32542 [00:22<5:32:31,  1.63it/s]  0%|          | 21/32542 [00:22<4:13:39,  2.14it/s]  0%|          | 22/32542 [00:22<3:18:49,  2.73it/s]  0%|          | 23/32542 [00:26<13:26:12,  1.49s/it]  0%|          | 24/32542 [00:26<9:46:14,  1.08s/it]   0%|          | 25/32542 [00:29<14:25:32,  1.60s/it]  0%|          | 26/32542 [00:29<10:25:33,  1.15s/it]  0%|          | 27/32542 [00:30<7:40:08,  1.18it/s]   0%|          | 28/32542 [00:30<5:42:32,  1.58it/s]  0%|          | 29/32542 [00:30<4:17:39,  2.10it/s]  0%|          | 30/32542 [00:30<3:21:34,  2.69it/s]  0%|          | 31/32542 [00:34<12:12:30,  1.35s/it]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0009765625, 'R@5 ECG to Text': 0.00390625, 'R@10 ECG to Text': 0.0078125, 'R@1 Text to ECG': 0.0009765625, 'R@5 Text to ECG': 0.0048828125, 'R@10 Text to ECG': 0.01171875}
  0%|          | 32/32542 [00:34<9:25:37,  1.04s/it]   0%|          | 33/32542 [00:38<17:22:00,  1.92s/it]  0%|          | 34/32542 [00:38<12:29:16,  1.38s/it]  0%|          | 35/32542 [00:38<9:05:50,  1.01s/it]   0%|          | 36/32542 [00:38<6:43:37,  1.34it/s]  0%|          | 37/32542 [00:38<5:04:46,  1.78it/s]  0%|          | 38/32542 [00:38<3:52:38,  2.33it/s]  0%|          | 39/32542 [00:40<6:38:20,  1.36it/s]  0%|          | 40/32542 [00:40<4:57:42,  1.82it/s]  0%|          | 41/32542 [00:45<18:17:43,  2.03s/it]  0%|          | 42/32542 [00:46<13:09:26,  1.46s/it]  0%|          | 43/32542 [00:46<9:32:12,  1.06s/it]   0%|          | 44/32542 [00:46<7:02:01,  1.28it/s]  0%|          | 45/32542 [00:46<5:18:09,  1.70it/s]  0%|          | 46/32542 [00:46<4:01:10,  2.25it/s]  0%|          | 47/32542 [00:47<6:18:39,  1.43it/s]  0%|          | 48/32542 [00:48<4:46:21,  1.89it/s]  0%|          | 49/32542 [00:53<19:24:02,  2.15s/it]  0%|          | 50/32542 [00:54<13:55:56,  1.54s/it]  0%|          | 51/32542 [00:54<10:04:03,  1.12s/it]  0%|          | 52/32542 [00:54<7:24:16,  1.22it/s]   0%|          | 53/32542 [00:54<5:32:16,  1.63it/s]  0%|          | 54/32542 [00:54<4:11:42,  2.15it/s]  0%|          | 55/32542 [00:55<5:45:22,  1.57it/s]  0%|          | 56/32542 [00:55<4:24:40,  2.05it/s]  0%|          | 57/32542 [01:01<18:08:36,  2.01s/it]  0%|          | 58/32542 [01:01<13:02:26,  1.45s/it]  0%|          | 59/32542 [01:01<9:28:26,  1.05s/it]   0%|          | 60/32542 [01:01<6:57:05,  1.30it/s]  0%|          | 61/32542 [01:01<5:14:41,  1.72it/s]  0%|          | 62/32542 [01:01<4:00:35,  2.25it/s]  0%|          | 63/32542 [01:02<3:10:07,  2.85it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0009765625, 'R@5 ECG to Text': 0.0078125, 'R@10 ECG to Text': 0.013671875, 'R@1 Text to ECG': 0.0, 'R@5 Text to ECG': 0.001953125, 'R@10 Text to ECG': 0.0048828125}
  0%|          | 64/32542 [01:02<3:00:04,  3.01it/s]  0%|          | 65/32542 [01:07<16:32:37,  1.83s/it]  0%|          | 66/32542 [01:07<11:55:13,  1.32s/it]  0%|          | 67/32542 [01:08<8:42:16,  1.04it/s]   0%|          | 68/32542 [01:08<6:26:25,  1.40it/s]  0%|          | 69/32542 [01:08<4:48:27,  1.88it/s]  0%|          | 70/32542 [01:08<3:45:49,  2.40it/s]  0%|          | 71/32542 [01:08<2:57:42,  3.05it/s]  0%|          | 72/32542 [01:08<2:24:19,  3.75it/s]  0%|          | 73/32542 [01:14<17:05:14,  1.89s/it]  0%|          | 74/32542 [01:14<12:17:23,  1.36s/it]  0%|          | 75/32542 [01:14<8:58:38,  1.00it/s]   0%|          | 76/32542 [01:14<6:37:06,  1.36it/s]  0%|          | 77/32542 [01:14<4:58:45,  1.81it/s]  0%|          | 78/32542 [01:14<3:53:18,  2.32it/s]  0%|          | 79/32542 [01:15<3:02:08,  2.97it/s]  0%|          | 80/32542 [01:15<2:32:16,  3.55it/s]  0%|          | 81/32542 [01:20<15:42:44,  1.74s/it]  0%|          | 82/32542 [01:20<11:21:03,  1.26s/it]  0%|          | 83/32542 [01:20<8:16:43,  1.09it/s]   0%|          | 84/32542 [01:20<6:10:07,  1.46it/s]  0%|          | 85/32542 [01:20<4:39:25,  1.94it/s]  0%|          | 86/32542 [01:21<3:35:08,  2.51it/s]  0%|          | 87/32542 [01:21<2:51:35,  3.15it/s]  0%|          | 88/32542 [01:21<2:21:17,  3.83it/s]  0%|          | 89/32542 [01:26<15:53:40,  1.76s/it]  0%|          | 90/32542 [01:26<11:28:09,  1.27s/it]  0%|          | 91/32542 [01:26<8:22:56,  1.08it/s]   0%|          | 92/32542 [01:26<6:11:56,  1.45it/s]  0%|          | 93/32542 [01:27<4:41:48,  1.92it/s]  0%|          | 94/32542 [01:27<3:37:26,  2.49it/s]  0%|          | 95/32542 [01:28<4:58:34,  1.81it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.0, 'R@5 ECG to Text': 0.00390625, 'R@10 ECG to Text': 0.0048828125, 'R@1 Text to ECG': 0.001953125, 'R@5 Text to ECG': 0.0068359375, 'R@10 Text to ECG': 0.0107421875}
  0%|          | 96/32542 [01:28<4:27:43,  2.02it/s]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_120241-0yobdm57
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/0yobdm57
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:09<87:08:29,  9.64s/it]  0%|          | 3/32542 [00:09<23:13:14,  2.57s/it]  0%|          | 4/32542 [00:09<15:41:37,  1.74s/it]  0%|          | 5/32542 [00:10<11:00:51,  1.22s/it]  0%|          | 6/32542 [00:10<7:58:44,  1.13it/s]   0%|          | 7/32542 [00:10<5:54:37,  1.53it/s]  0%|          | 8/32542 [00:10<4:34:11,  1.98it/s]  0%|          | 9/32542 [00:14<14:17:54,  1.58s/it]  0%|          | 10/32542 [00:14<10:22:47,  1.15s/it]  0%|          | 11/32542 [00:15<7:42:00,  1.17it/s]   0%|          | 12/32542 [00:15<5:49:22,  1.55it/s]  0%|          | 13/32542 [00:15<5:12:30,  1.73it/s]  0%|          | 14/32542 [00:15<4:05:55,  2.20it/s]  0%|          | 15/32542 [00:15<3:16:48,  2.75it/s]  0%|          | 16/32542 [00:16<2:45:29,  3.28it/s]  0%|          | 17/32542 [00:20<14:36:51,  1.62s/it]  0%|          | 18/32542 [00:20<10:42:50,  1.19s/it]  0%|          | 19/32542 [00:21<7:55:59,  1.14it/s]   0%|          | 20/32542 [00:21<6:02:12,  1.50it/s]  0%|          | 21/32542 [00:21<5:11:56,  1.74it/s]  0%|          | 22/32542 [00:21<4:04:04,  2.22it/s]  0%|          | 23/32542 [00:21<3:20:04,  2.71it/s]  0%|          | 24/32542 [00:22<2:49:37,  3.20it/s]  0%|          | 25/32542 [00:26<14:22:34,  1.59s/it]  0%|          | 26/32542 [00:26<10:31:46,  1.17s/it]  0%|          | 27/32542 [00:27<7:48:43,  1.16it/s]   0%|          | 28/32542 [00:27<5:57:15,  1.52it/s]  0%|          | 29/32542 [00:27<5:17:41,  1.71it/s]  0%|          | 30/32542 [00:27<4:11:01,  2.16it/s]  0%|          | 31/32542 [00:28<3:24:54,  2.64it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.1171875, 'R@5 ECG to Text': 0.314453125, 'R@10 ECG to Text': 0.40625, 'R@1 Text to ECG': 0.103515625, 'R@5 Text to ECG': 0.2734375, 'R@10 Text to ECG': 0.369140625}
  0%|          | 32/32542 [00:28<3:29:58,  2.58it/s]  0%|          | 33/32542 [00:32<14:44:26,  1.63s/it]  0%|          | 34/32542 [00:33<10:44:59,  1.19s/it]  0%|          | 35/32542 [00:33<7:59:57,  1.13it/s]   0%|          | 36/32542 [00:33<6:03:55,  1.49it/s]  0%|          | 37/32542 [00:33<5:09:42,  1.75it/s]  0%|          | 38/32542 [00:34<4:08:37,  2.18it/s]  0%|          | 39/32542 [00:34<3:22:54,  2.67it/s]  0%|          | 40/32542 [00:34<2:48:27,  3.22it/s]Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_120751-2k3d3lix
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/2k3d3lix
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:08<74:24:31,  8.23s/it]  0%|          | 3/32542 [00:08<19:59:09,  2.21s/it]  0%|          | 4/32542 [00:08<13:33:30,  1.50s/it]  0%|          | 5/32542 [00:08<9:36:47,  1.06s/it]   0%|          | 6/32542 [00:08<7:01:28,  1.29it/s]  0%|          | 7/32542 [00:09<5:18:31,  1.70it/s]  0%|          | 8/32542 [00:09<4:08:50,  2.18it/s]  0%|          | 9/32542 [00:16<22:27:14,  2.48s/it]  0%|          | 10/32542 [00:16<16:02:28,  1.78s/it]  0%|          | 11/32542 [00:16<11:39:16,  1.29s/it]  0%|          | 12/32542 [00:16<8:37:15,  1.05it/s]   0%|          | 13/32542 [00:17<6:28:27,  1.40it/s]  0%|          | 14/32542 [00:17<5:00:00,  1.81it/s]  0%|          | 15/32542 [00:17<3:56:43,  2.29it/s]  0%|          | 16/32542 [00:17<3:12:59,  2.81it/s]  0%|          | 17/32542 [00:22<16:18:04,  1.80s/it]  0%|          | 18/32542 [00:22<11:51:47,  1.31s/it]  0%|          | 19/32542 [00:23<8:44:12,  1.03it/s]   0%|          | 20/32542 [00:23<6:35:16,  1.37it/s]  0%|          | 21/32542 [00:23<5:04:36,  1.78it/s]  0%|          | 22/32542 [00:23<3:59:59,  2.26it/s]  0%|          | 23/32542 [00:23<3:17:01,  2.75it/s]  0%|          | 24/32542 [00:23<2:44:52,  3.29it/s]  0%|          | 25/32542 [00:28<15:28:36,  1.71s/it]  0%|          | 26/32542 [00:29<11:19:14,  1.25s/it]  0%|          | 27/32542 [00:29<8:19:53,  1.08it/s]   0%|          | 28/32542 [00:29<6:18:35,  1.43it/s]  0%|          | 29/32542 [00:29<4:52:46,  1.85it/s]  0%|          | 30/32542 [00:29<3:51:46,  2.34it/s]  0%|          | 31/32542 [00:29<3:11:22,  2.83it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.1171875, 'R@5 ECG to Text': 0.314453125, 'R@10 ECG to Text': 0.40625, 'R@1 Text to ECG': 0.103515625, 'R@5 Text to ECG': 0.2734375, 'R@10 Text to ECG': 0.369140625}
  0%|          | 32/32542 [00:30<3:19:38,  2.71it/s]  0%|          | 33/32542 [00:34<14:50:41,  1.64s/it]  0%|          | 34/32542 [00:35<10:49:20,  1.20s/it]  0%|          | 35/32542 [00:35<8:58:53,  1.01it/s]   0%|          | 36/32542 [00:35<6:46:19,  1.33it/s]  0%|          | 37/32542 [00:35<5:13:35,  1.73it/s]  0%|          | 38/32542 [00:36<4:05:28,  2.21it/s]  0%|          | 39/32542 [00:36<3:20:31,  2.70it/s]  0%|          | 40/32542 [00:36<2:47:32,  3.23it/s]  0%|          | 41/32542 [00:42<18:01:12,  2.00s/it]  0%|          | 42/32542 [00:42<13:05:34,  1.45s/it]  0%|          | 43/32542 [00:42<9:38:32,  1.07s/it]   0%|          | 44/32542 [00:43<8:51:59,  1.02it/s]  0%|          | 45/32542 [00:43<6:38:21,  1.36it/s]  0%|          | 46/32542 [00:43<5:07:41,  1.76it/s]  0%|          | 47/32542 [00:44<4:04:21,  2.22it/s]  0%|          | 48/32542 [00:44<3:17:48,  2.74it/s]  0%|          | 49/32542 [00:51<23:06:31,  2.56s/it]  0%|          | 50/32542 [00:52<16:35:51,  1.84s/it]  0%|          | 51/32542 [00:52<12:04:50,  1.34s/it]  0%|          | 52/32542 [00:52<8:55:30,  1.01it/s]   0%|          | 53/32542 [00:52<6:39:40,  1.35it/s]  0%|          | 54/32542 [00:52<5:07:11,  1.76it/s]  0%|          | 55/32542 [00:52<4:03:03,  2.23it/s]  0%|          | 56/32542 [00:53<3:15:05,  2.78it/s]  0%|          | 57/32542 [01:01<23:48:23,  2.64s/it]  0%|          | 58/32542 [01:01<17:06:23,  1.90s/it]  0%|          | 59/32542 [01:01<12:27:01,  1.38s/it]  0%|          | 60/32542 [01:01<9:11:16,  1.02s/it]   0%|          | 61/32542 [01:01<6:52:00,  1.31it/s]  0%|          | 62/32542 [01:01<5:17:45,  1.70it/s]  0%|          | 63/32542 [01:02<4:10:54,  2.16it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.125, 'R@5 ECG to Text': 0.3154296875, 'R@10 ECG to Text': 0.419921875, 'R@1 Text to ECG': 0.09375, 'R@5 Text to ECG': 0.2744140625, 'R@10 Text to ECG': 0.3623046875}
  0%|          | 64/32542 [01:02<4:21:44,  2.07it/s]  0%|          | 65/32542 [01:10<23:37:14,  2.62s/it]  0%|          | 66/32542 [01:10<16:58:15,  1.88s/it]  0%|          | 67/32542 [01:10<12:20:29,  1.37s/it]  0%|          | 68/32542 [01:10<9:04:19,  1.01s/it]   0%|          | 69/32542 [01:10<6:49:07,  1.32it/s]  0%|          | 70/32542 [01:11<5:13:23,  1.73it/s]  0%|          | 71/32542 [01:11<4:04:42,  2.21it/s]  0%|          | 72/32542 [01:11<3:19:49,  2.71it/s]  0%|          | 73/32542 [01:17<20:10:14,  2.24s/it]  0%|          | 74/32542 [01:18<14:32:43,  1.61s/it]  0%|          | 75/32542 [01:18<10:39:57,  1.18s/it]  0%|          | 76/32542 [01:18<7:56:48,  1.13it/s]   0%|          | 77/32542 [01:18<5:59:56,  1.50it/s]  0%|          | 78/32542 [01:18<4:40:57,  1.93it/s]  0%|          | 79/32542 [01:18<3:42:36,  2.43it/s]  0%|          | 80/32542 [01:19<4:03:10,  2.22it/s]  0%|          | 81/32542 [01:25<18:28:20,  2.05s/it]  0%|          | 82/32542 [01:25<13:23:50,  1.49s/it]  0%|          | 83/32542 [01:25<9:49:32,  1.09s/it]   0%|          | 84/32542 [01:25<7:21:40,  1.22it/s]  0%|          | 85/32542 [01:25<5:36:16,  1.61it/s]  0%|          | 86/32542 [01:26<4:24:25,  2.05it/s]  0%|          | 87/32542 [01:26<3:34:16,  2.52it/s]  0%|          | 88/32542 [01:26<3:54:39,  2.31it/s]  0%|          | 89/32542 [01:32<19:21:06,  2.15s/it]  0%|          | 90/32542 [01:33<14:01:47,  1.56s/it]  0%|          | 91/32542 [01:33<10:18:36,  1.14s/it]  0%|          | 92/32542 [01:33<7:38:52,  1.18it/s]   0%|          | 93/32542 [01:33<5:49:46,  1.55it/s]  0%|          | 94/32542 [01:33<4:32:20,  1.99it/s]  0%|          | 95/32542 [01:34<3:37:13,  2.49it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.1357421875, 'R@5 ECG to Text': 0.3486328125, 'R@10 ECG to Text': 0.478515625, 'R@1 Text to ECG': 0.10546875, 'R@5 Text to ECG': 0.3271484375, 'R@10 Text to ECG': 0.443359375}
  0%|          | 96/32542 [01:34<3:35:34,  2.51it/s]  0%|          | 97/32542 [01:40<18:56:22,  2.10s/it]  0%|          | 98/32542 [01:40<13:43:11,  1.52s/it]  0%|          | 99/32542 [01:40<10:00:54,  1.11s/it]  0%|          | 100/32542 [01:40<7:30:08,  1.20it/s]  0%|          | 101/32542 [01:41<5:42:50,  1.58it/s]  0%|          | 102/32542 [01:41<4:25:50,  2.03it/s]  0%|          | 103/32542 [01:41<3:33:19,  2.53it/s]  0%|          | 104/32542 [01:41<2:56:16,  3.07it/s]  0%|          | 105/32542 [01:47<18:11:37,  2.02s/it]  0%|          | 106/32542 [01:47<13:13:39,  1.47s/it]  0%|          | 107/32542 [01:47<9:40:47,  1.07s/it]   0%|          | 108/32542 [01:48<7:14:50,  1.24it/s]  0%|          | 109/32542 [01:48<5:34:46,  1.61it/s]  0%|          | 110/32542 [01:48<4:17:42,  2.10it/s]  0%|          | 111/32542 [01:48<3:27:47,  2.60it/s]  0%|          | 112/32542 [01:48<3:11:52,  2.82it/s]  0%|          | 113/32542 [01:54<18:35:21,  2.06s/it]  0%|          | 114/32542 [01:55<13:27:00,  1.49s/it]  0%|          | 115/32542 [01:55<9:51:21,  1.09s/it]   0%|          | 116/32542 [01:55<7:21:06,  1.23it/s]  0%|          | 117/32542 [01:55<5:33:39,  1.62it/s]  0%|          | 118/32542 [01:55<4:22:11,  2.06it/s]  0%|          | 119/32542 [01:55<3:29:34,  2.58it/s]  0%|          | 120/32542 [01:57<6:00:59,  1.50it/s]  0%|          | 121/32542 [02:01<16:54:48,  1.88s/it]  0%|          | 122/32542 [02:02<12:19:25,  1.37s/it]  0%|          | 123/32542 [02:02<9:25:04,  1.05s/it]   0%|          | 124/32542 [02:02<7:04:27,  1.27it/s]  0%|          | 125/32542 [02:02<5:21:18,  1.68it/s]  0%|          | 126/32542 [02:03<5:04:17,  1.78it/s]  0%|          | 127/32542 [02:03<3:58:54,  2.26it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.1181640625, 'R@5 ECG to Text': 0.314453125, 'R@10 ECG to Text': 0.4345703125, 'R@1 Text to ECG': 0.103515625, 'R@5 Text to ECG': 0.2890625, 'R@10 Text to ECG': 0.400390625}
  0%|          | 128/32542 [02:05<9:24:45,  1.05s/it]  0%|          | 129/32542 [02:08<13:19:17,  1.48s/it]  0%|          | 130/32542 [02:08<9:47:20,  1.09s/it]   0%|          | 131/32542 [02:09<9:15:31,  1.03s/it]  0%|          | 132/32542 [02:09<6:52:45,  1.31it/s]  0%|          | 133/32542 [02:09<5:16:54,  1.70it/s]  0%|          | 134/32542 [02:10<6:21:22,  1.42it/s]  0%|          | 135/32542 [02:10<4:55:13,  1.83it/s]  0%|          | 136/32542 [02:13<9:54:53,  1.10s/it]  0%|          | 137/32542 [02:16<16:48:36,  1.87s/it]  0%|          | 138/32542 [02:17<12:14:23,  1.36s/it]  0%|          | 139/32542 [02:17<9:03:20,  1.01s/it]   0%|          | 140/32542 [02:17<6:45:38,  1.33it/s]  0%|          | 141/32542 [02:17<5:12:46,  1.73it/s]  0%|          | 142/32542 [02:18<7:08:41,  1.26it/s]  0%|          | 143/32542 [02:19<5:26:53,  1.65it/s]  0%|          | 144/32542 [02:20<8:10:09,  1.10it/s]  0%|          | 145/32542 [02:24<17:08:07,  1.90s/it]  0%|          | 146/32542 [02:25<12:27:46,  1.38s/it]  0%|          | 147/32542 [02:25<9:08:27,  1.02s/it]   0%|          | 148/32542 [02:25<6:51:51,  1.31it/s]  0%|          | 149/32542 [02:25<5:15:23,  1.71it/s]  0%|          | 150/32542 [02:25<4:26:10,  2.03it/s]  0%|          | 151/32542 [02:26<5:08:06,  1.75it/s]  0%|          | 152/32542 [02:32<19:15:55,  2.14s/it]  0%|          | 153/32542 [02:32<13:57:11,  1.55s/it]  0%|          | 154/32542 [02:32<10:13:40,  1.14s/it]  0%|          | 155/32542 [02:34<11:12:09,  1.25s/it]  0%|          | 156/32542 [02:34<8:17:33,  1.08it/s]   0%|          | 157/32542 [02:34<6:17:15,  1.43it/s]  0%|          | 158/32542 [02:34<4:49:46,  1.86it/s]  0%|          | 159/32542 [02:36<7:40:56,  1.17it/s]
[Computing Recall@K for 1024 samples...]
Batch Testing Results: {'Samples': 1024, 'R@1 ECG to Text': 0.1181640625, 'R@5 ECG to Text': 0.3115234375, 'R@10 ECG to Text': 0.40625, 'R@1 Text to ECG': 0.0849609375, 'R@5 Text to ECG': 0.28125, 'R@10 Text to ECG': 0.3916015625}
  0%|          | 160/32542 [02:39<14:31:08,  1.61s/it]  0%|          | 161/32542 [02:40<11:19:29,  1.26s/it]  0%|          | 162/32542 [02:40<8:23:57,  1.07it/s]   1%|          | 163/32542 [02:43<13:34:04,  1.51s/it]  1%|          | 164/32542 [02:43<9:57:51,  1.11s/it]   1%|          | 165/32542 [02:43<7:24:47,  1.21it/s]  1%|          | 166/32542 [02:43<5:37:08,  1.60it/s]  1%|          | 167/32542 [02:44<6:39:33,  1.35it/s]  1%|          | 168/32542 [02:48<14:02:36,  1.56s/it]  1%|          | 169/32542 [02:49<12:49:43,  1.43s/it]  1%|          | 170/32542 [02:49<9:26:43,  1.05s/it]   1%|          | 171/32542 [02:52<15:36:46,  1.74s/it]  1%|          | 172/32542 [02:53<11:24:38,  1.27s/it]  1%|          | 173/32542 [02:53<8:25:41,  1.07it/s]   1%|          | 174/32542 [02:53<6:22:45,  1.41it/s]  1%|          | 175/32542 [02:53<4:57:08,  1.82it/s]  1%|          | 176/32542 [02:55<9:56:25,  1.11s/it]  1%|          | 177/32542 [02:57<11:22:00,  1.26s/it]  1%|          | 178/32542 [02:57<8:23:53,  1.07it/s]   1%|          | 179/32542 [03:01<15:55:11,  1.77s/it]  1%|          | 180/32542 [03:01<11:37:09,  1.29s/it]  1%|          | 181/32542 [03:01<8:33:19,  1.05it/s]   1%|          | 182/32542 [03:01<6:25:31,  1.40it/s]  1%|          | 183/32542 [03:02<4:57:25,  1.81it/s]  1%|          | 184/32542 [03:03<7:31:15,  1.20it/s]  1%|          | 185/32542 [03:06<12:01:31,  1.34s/it]  1%|          | 186/32542 [03:06<8:50:52,  1.02it/s] Start running basic DDP example on rank 0.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: 1305018437 (1305018437-university-of-dundee). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.6
wandb: Run data is saved locally in /home/yanmingke/ecgfounder2/retrieval/wandb/run-20250411_123650-578mtphg
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run CLIP_test_1000
wandb:  View project at https://wandb.ai/1305018437-university-of-dundee/Retrieval
wandb:  View run at https://wandb.ai/1305018437-university-of-dundee/Retrieval/runs/578mtphg
/home/yanmingke/.venv/lib/python3.10/site-packages/transformers/modeling_utils.py:1435: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(resolved_archive_file, map_location="cpu")
Start testing...
  0%|          | 0/32542 [00:00<?, ?it/s]  0%|          | 1/32542 [00:09<84:52:08,  9.39s/it]  0%|          | 3/32542 [00:09<22:35:20,  2.50s/it]  0%|          | 4/32542 [00:09<15:20:31,  1.70s/it]  0%|          | 5/32542 [00:09<10:46:14,  1.19s/it]  0%|          | 6/32542 [00:10<7:45:42,  1.16it/s]   0%|          | 7/32542 [00:10<5:48:48,  1.55it/s]  0%|          | 8/32542 [00:10<4:29:45,  2.01it/s]  0%|          | 9/32542 [00:15<16:31:44,  1.83s/it]  0%|          | 10/32542 [00:15<12:47:40,  1.42s/it]  0%|          | 11/32542 [00:15<9:24:17,  1.04s/it]   0%|          | 12/32542 [00:16<6:59:44,  1.29it/s]  0%|          | 13/32542 [00:16<5:20:29,  1.69it/s]  0%|          | 14/32542 [00:16<4:11:57,  2.15it/s]  0%|          | 15/32542 [00:16<4:07:45,  2.19it/s]  0%|          | 16/32542 [00:17<3:22:14,  2.68it/s]